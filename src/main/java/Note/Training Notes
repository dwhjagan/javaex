            | Class | Package | Subclass | Subclass | World
            |       |         |(same pkg)|(diff pkg)|
————————————+———————+—————————+——————————+——————————+————————
public      |   +   |    +    |    +     |     +    |   +
————————————+———————+—————————+——————————+——————————+————————
protected   |   +   |    +    |    +     |     +    |   o
————————————+———————+—————————+——————————+——————————+————————
no modifier |   +   |    +    |    +     |     o    |   o
————————————+———————+—————————+——————————+——————————+————————
private     |   +   |    o    |    o     |     o    |   o

+ : accessible
o : not accessible

public   : accessible from everywhere.
protected: accessible by the classes of the same package and the subclasses residing in any package.
default  :(no modifier specified): accessible by the classes of the same package.
private  : accessible within the same class only.

----------------------------------------------------------------------------
Public    Static    void          main(         string        args[])
access    Keyword   Return type   method Name   string class  array of string objects
modifier

----------------------------------------------------------------------------
Java Language Keywords

Here is a list of keywords in the Java programming language.
You cannot use any of the following as identifiers in your programs.
The keywords const and goto are reserved,
even though they are not currently used. true, false, and null might seem like keywords,
but they are actually literals; you cannot use them as identifiers in your programs.

abstract	continue   for	          new	    switch
assert***	default	   goto*	      package	synchronized
boolean	    do	       if	          private	this
break	    double	   implements	  protected	throw
byte	    else	   import	      public	throws
case	    enum****   instanceof     return	transient
catch	    extends	   int	          short	    try
char	   final	   interface	  static	void
class	   finally	   long	          strictfp** volatile
const*	   float	   native	      super	    while

----------------------------------------------------------------------------